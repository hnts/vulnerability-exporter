package trivy

import (
	"context"
	"encoding/json"
	"os/exec"

	"github.com/aquasecurity/trivy/pkg/report"
	"golang.org/x/xerrors"
)

type Client struct{}

func (c Client) ScanImage(ctx context.Context, image string, cacheDir string) (*report.Report, error) {
	result, err := exec.CommandContext(ctx, "trivy", "--cache-dir", cacheDir, "--quiet", "image", "--skip-update", "--no-progress", "-f", "json", image).CombinedOutput()
	if err != nil {
		return nil, xerrors.Errorf("failed to execute trivy image: %s: %s", err, result)
	}

	var report report.Report
	err = json.Unmarshal([]byte(result), &report)
	if err != nil {
		return nil, err
	}

	return &report, nil
}

func (c Client) UpdateDatabase(ctx context.Context, cacheDir string) error {
	result, err := exec.CommandContext(ctx, "trivy", "--cache-dir", cacheDir, "image", "--download-db-only").CombinedOutput()
	if err != nil {
		return xerrors.Errorf("failed to execute trivy image --download-db-only: %s: %s", err, result)
	}

	return nil
}
