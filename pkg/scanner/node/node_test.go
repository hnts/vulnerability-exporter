package node_test

import (
	"context"
	"encoding/json"
	"reflect"
	"testing"

	"github.com/aquasecurity/trivy/pkg/report"
	"github.com/hnts/vulnerability-exporter/pkg/scanner/node"
	"golang.org/x/xerrors"
	v1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

var resultJson string = `{
	"SchemaVersion": 2,
	"ArtifactName": "test",
	"ArtifactType": "filesystem",
	"Metadata": {
	  "OS": {
		"Family": "ubuntu",
		"Name": "20.04"
	  },
	  "ImageConfig": {
		"architecture": "",
		"created": "0001-01-01T00:00:00Z",
		"os": "",
		"rootfs": {
		  "type": "",
		  "diff_ids": null
		},
		"config": {}
	  }
	},
	"Results": [
	  {
		"Target": "test (ubuntu 20.04)",
		"Class": "os-pkgs",
		"Type": "ubuntu",
		"Vulnerabilities": [
		  {
			"VulnerabilityID": "CVE-2012-6655",
			"PkgName": "accountsservice",
			"InstalledVersion": "0.6.55-0ubuntu12~20.04.5",
			"Layer": {},
			"SeveritySource": "ubuntu",
			"PrimaryURL": "https://avd.aquasec.com/nvd/cve-2012-6655",
			"Title": "accountsservice: local encrypted password disclosure when changing password",
			"Description": "An issue exists AccountService 0.6.37 in the user_change_password_authorized_cb() function in user.c which could let a local users obtain encrypted passwords.",
			"Severity": "LOW",
			"CweIDs": [
			  "CWE-732"
			],
			"CVSS": {
			  "nvd": {
				"V2Vector": "AV:L/AC:L/Au:N/C:P/I:N/A:N",
				"V3Vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N",
				"V2Score": 2.1,
				"V3Score": 3.3
			  },
			  "redhat": {
				"V2Vector": "AV:L/AC:M/Au:N/C:P/I:N/A:N",
				"V2Score": 1.9
			  }
			},
			"References": [
			  "http://openwall.com/lists/oss-security/2014/08/15/5",
			  "http://www.openwall.com/lists/oss-security/2014/08/16/7",
			  "http://www.securityfocus.com/bid/69245",
			  "https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2012-6655",
			  "https://bugzilla.suse.com/show_bug.cgi?id=CVE-2012-6655",
			  "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-6655",
			  "https://exchange.xforce.ibmcloud.com/vulnerabilities/95325",
			  "https://security-tracker.debian.org/tracker/CVE-2012-6655"
			],
			"PublishedDate": "2019-11-27T18:15:00Z",
			"LastModifiedDate": "2019-12-16T19:47:00Z"
		  }
		]
	  }
	]
  }`

type fakeKuberneteClient struct {
	FakeListNodes          func(ctx context.Context) ([]v1.Node, error)
	FakeListPodsByLabel    func(ctx context.Context, label *metav1.LabelSelector) ([]v1.Pod, error)
	FakeCreatePod          func(ctx context.Context, namespace string, pod *v1.Pod) error
	FakeDeletePod          func(ctx context.Context, namespace string, podName string) error
	FakeWaitUntilCompleted func(namespace string, podName string) error
	FakeGetContainerLog    func(ctx context.Context, namespace string, podName string, containerName string) (string, error)
}

var _ node.KubernetesClient = &fakeKuberneteClient{}

func (f *fakeKuberneteClient) ListNodes(ctx context.Context) ([]v1.Node, error) {
	return f.FakeListNodes(ctx)
}

func (f *fakeKuberneteClient) ListPodsByLabel(ctx context.Context, label *metav1.LabelSelector) ([]v1.Pod, error) {
	return f.FakeListPodsByLabel(ctx, label)
}

func (f *fakeKuberneteClient) CreatePod(ctx context.Context, namespace string, pod *v1.Pod) error {
	return f.FakeCreatePod(ctx, namespace, pod)
}

func (f *fakeKuberneteClient) DeletePod(ctx context.Context, namespace string, podName string) error {
	return f.FakeDeletePod(ctx, namespace, podName)
}

func (f *fakeKuberneteClient) WaitUntilCompleted(namespace string, podName string) error {
	return f.FakeWaitUntilCompleted(namespace, podName)
}

func (f *fakeKuberneteClient) GetContainerLog(ctx context.Context, namespace string, podName string, containerName string) (string, error) {
	return f.FakeGetContainerLog(ctx, namespace, podName, containerName)
}

func getReportStruct(resultJson string) *report.Report {
	var report report.Report
	_ = json.Unmarshal([]byte(resultJson), &report)

	return &report
}

func Test_ScanNode(t *testing.T) {
	type fields struct {
		kubernetesClient node.KubernetesClient
		namespace        string
	}
	type args struct {
		ctx  context.Context
		node v1.Node
	}
	tests := []struct {
		name    string
		fields  fields
		args    args
		want    *report.Report
		wantErr bool
	}{
		{
			"get invalid result from container logs",
			fields{
				&fakeKuberneteClient{
					FakeListNodes: func(ctx context.Context) ([]v1.Node, error) {
						return []v1.Node{}, nil
					},
					FakeListPodsByLabel: func(ctx context.Context, label *metav1.LabelSelector) ([]v1.Pod, error) {
						return []v1.Pod{}, nil
					},
					FakeDeletePod: func(ctx context.Context, namespace string, podName string) error {
						return nil
					},
					FakeCreatePod: func(ctx context.Context, namespace string, pod *v1.Pod) error {
						return nil
					},
					FakeWaitUntilCompleted: func(namespace string, podName string) error {
						return nil
					},
					FakeGetContainerLog: func(ctx context.Context, namespace string, podName string, containerName string) (string, error) {
						return "test test", nil
					},
				},
				"test-ns",
			},
			args{
				context.Background(),
				v1.Node{},
			},
			nil,
			true,
		},
		{
			"failed to create pod",
			fields{
				&fakeKuberneteClient{
					FakeListNodes: func(ctx context.Context) ([]v1.Node, error) {
						return []v1.Node{}, nil
					},
					FakeListPodsByLabel: func(ctx context.Context, label *metav1.LabelSelector) ([]v1.Pod, error) {
						return []v1.Pod{}, nil
					},
					FakeDeletePod: func(ctx context.Context, namespace string, podName string) error {
						return nil
					},
					FakeCreatePod: func(ctx context.Context, namespace string, pod *v1.Pod) error {
						return xerrors.New("failed to create pod")
					},
					FakeWaitUntilCompleted: func(namespace string, podName string) error {
						return nil
					},
					FakeGetContainerLog: func(ctx context.Context, namespace string, podName string, containerName string) (string, error) {
						return resultJson, nil
					},
				},
				"test-ns",
			},
			args{
				context.Background(),
				v1.Node{},
			},
			nil,
			true,
		},
		{
			"failed to complete pod",
			fields{
				&fakeKuberneteClient{
					FakeListNodes: func(ctx context.Context) ([]v1.Node, error) {
						return []v1.Node{}, nil
					},
					FakeListPodsByLabel: func(ctx context.Context, label *metav1.LabelSelector) ([]v1.Pod, error) {
						return []v1.Pod{}, nil
					},
					FakeDeletePod: func(ctx context.Context, namespace string, podName string) error {
						return nil
					},
					FakeCreatePod: func(ctx context.Context, namespace string, pod *v1.Pod) error {
						return nil
					},
					FakeWaitUntilCompleted: func(namespace string, podName string) error {
						return xerrors.New("failed to complete pod")
					},
					FakeGetContainerLog: func(ctx context.Context, namespace string, podName string, containerName string) (string, error) {
						return resultJson, nil
					},
				},
				"test-ns",
			},
			args{
				context.Background(),
				v1.Node{},
			},
			nil,
			true,
		},
		{
			"failed to get container log from pod",
			fields{
				&fakeKuberneteClient{
					FakeListNodes: func(ctx context.Context) ([]v1.Node, error) {
						return []v1.Node{}, nil
					},
					FakeListPodsByLabel: func(ctx context.Context, label *metav1.LabelSelector) ([]v1.Pod, error) {
						return []v1.Pod{}, nil
					},
					FakeDeletePod: func(ctx context.Context, namespace string, podName string) error {
						return nil
					},
					FakeCreatePod: func(ctx context.Context, namespace string, pod *v1.Pod) error {
						return nil
					},
					FakeWaitUntilCompleted: func(namespace string, podName string) error {
						return nil
					},
					FakeGetContainerLog: func(ctx context.Context, namespace string, podName string, containerName string) (string, error) {
						return "", xerrors.New("failed to get container log from pod")
					},
				},
				"test-ns",
			},
			args{
				context.Background(),
				v1.Node{},
			},
			nil,
			true,
		},
		{
			"scan node successfully",
			fields{
				&fakeKuberneteClient{
					FakeListNodes: func(ctx context.Context) ([]v1.Node, error) {
						return []v1.Node{}, nil
					},
					FakeListPodsByLabel: func(ctx context.Context, label *metav1.LabelSelector) ([]v1.Pod, error) {
						return []v1.Pod{}, nil
					},
					FakeDeletePod: func(ctx context.Context, namespace string, podName string) error {
						return nil
					},
					FakeCreatePod: func(ctx context.Context, namespace string, pod *v1.Pod) error {
						return nil
					},
					FakeWaitUntilCompleted: func(namespace string, podName string) error {
						return nil
					},
					FakeGetContainerLog: func(ctx context.Context, namespace string, podName string, containerName string) (string, error) {
						return resultJson, nil
					},
				},
				"test-ns",
			},
			args{
				context.Background(),
				v1.Node{},
			},
			getReportStruct(resultJson),
			false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			n := node.NewNodeScanner(tt.fields.kubernetesClient, tt.fields.namespace)
			got, err := n.ScanNode(tt.args.ctx, tt.args.node)
			if (err != nil) != tt.wantErr {
				t.Errorf("NodeScanner.ScanNode() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("NodeScanner.ScanNode() = %v, want %v", got, tt.want)
			}
		})
	}
}
