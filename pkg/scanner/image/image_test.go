package image_test

import (
	"context"
	"reflect"
	"testing"

	"github.com/aquasecurity/trivy/pkg/report"
	"github.com/hnts/vulnerability-exporter/pkg/scanner/image"
	"golang.org/x/xerrors"
	v1 "k8s.io/api/apps/v1"
	batchv1 "k8s.io/api/batch/v1"
)

type fakeTrivyClient struct {
	FakeScanImage      func(ctx context.Context, image string, cacheDir string) (*report.Report, error)
	FakeUpdateDatabase func(ctx context.Context, cacheDir string) error
}

var _ image.TrivyClient = &fakeTrivyClient{}

func (f *fakeTrivyClient) UpdateDatabase(ctx context.Context, cacheDir string) error {
	return f.FakeUpdateDatabase(ctx, cacheDir)
}

func (f *fakeTrivyClient) ScanImage(ctx context.Context, image string, cacheDir string) (*report.Report, error) {
	return f.FakeScanImage(ctx, image, cacheDir)
}

type fakeKuberneteClient struct {
	FakeListDeployments  func(ctx context.Context) ([]v1.Deployment, error)
	FakeListStatefulSets func(ctx context.Context) ([]v1.StatefulSet, error)
	FakeListDaemonSets   func(ctx context.Context) ([]v1.DaemonSet, error)
	FakeListCronJobs     func(ctx context.Context) ([]batchv1.CronJob, error)
}

var _ image.KubernetesClient = &fakeKuberneteClient{}

func (f *fakeKuberneteClient) ListDeployments(ctx context.Context) ([]v1.Deployment, error) {
	return f.FakeListDeployments(ctx)
}

func (f *fakeKuberneteClient) ListDaemonSets(ctx context.Context) ([]v1.DaemonSet, error) {
	return f.FakeListDaemonSets(ctx)
}

func (f *fakeKuberneteClient) ListStatefulSets(ctx context.Context) ([]v1.StatefulSet, error) {
	return f.FakeListStatefulSets(ctx)
}

func (f *fakeKuberneteClient) ListCronJobs(ctx context.Context) ([]batchv1.CronJob, error) {
	return f.FakeListCronJobs(ctx)
}

func TestImageScanner_ScanImages(t *testing.T) {
	type fields struct {
		kubernetesClient image.KubernetesClient
		trivyClient      image.TrivyClient
	}
	type args struct {
		ctx      context.Context
		images   []string
		cacheDir string
	}
	tests := []struct {
		name    string
		fields  fields
		args    args
		want    []report.Report
		wantErr bool
	}{
		{
			"scan image successfully",
			fields{
				&fakeKuberneteClient{
					FakeListDeployments: func(ctx context.Context) ([]v1.Deployment, error) {
						return []v1.Deployment{}, nil
					},
					FakeListDaemonSets: func(ctx context.Context) ([]v1.DaemonSet, error) {
						return []v1.DaemonSet{}, nil
					},
					FakeListStatefulSets: func(ctx context.Context) ([]v1.StatefulSet, error) {
						return []v1.StatefulSet{}, nil
					},
					FakeListCronJobs: func(ctx context.Context) ([]batchv1.CronJob, error) {
						return []batchv1.CronJob{}, nil
					},
				},
				&fakeTrivyClient{
					FakeScanImage: func(ctx context.Context, image string, cacheDir string) (*report.Report, error) {
						return &report.Report{}, nil
					},
					FakeUpdateDatabase: func(ctx context.Context, cacheDir string) error {
						return nil
					},
				},
			},
			args{
				context.Background(),
				[]string{"nginx"},
				"cache-dir",
			},
			[]report.Report{{}},
			false,
		},
		{
			"failed to update database",
			fields{
				&fakeKuberneteClient{
					FakeListDeployments: func(ctx context.Context) ([]v1.Deployment, error) {
						return []v1.Deployment{}, nil
					},
					FakeListDaemonSets: func(ctx context.Context) ([]v1.DaemonSet, error) {
						return []v1.DaemonSet{}, nil
					},
					FakeListStatefulSets: func(ctx context.Context) ([]v1.StatefulSet, error) {
						return []v1.StatefulSet{}, nil
					},
					FakeListCronJobs: func(ctx context.Context) ([]batchv1.CronJob, error) {
						return []batchv1.CronJob{}, nil
					},
				},
				&fakeTrivyClient{
					FakeScanImage: func(ctx context.Context, image string, cacheDir string) (*report.Report, error) {
						return &report.Report{}, nil
					},
					FakeUpdateDatabase: func(ctx context.Context, cacheDir string) error {
						return xerrors.New("failed to update database")
					},
				},
			},
			args{
				context.Background(),
				[]string{"nginx"},
				"cache-dir",
			},
			nil,
			true,
		},
		{
			"failed to scan some images",
			fields{
				&fakeKuberneteClient{
					FakeListDeployments: func(ctx context.Context) ([]v1.Deployment, error) {
						return []v1.Deployment{}, nil
					},
					FakeListDaemonSets: func(ctx context.Context) ([]v1.DaemonSet, error) {
						return []v1.DaemonSet{}, nil
					},
					FakeListStatefulSets: func(ctx context.Context) ([]v1.StatefulSet, error) {
						return []v1.StatefulSet{}, nil
					},
					FakeListCronJobs: func(ctx context.Context) ([]batchv1.CronJob, error) {
						return []batchv1.CronJob{}, nil
					},
				},
				&fakeTrivyClient{
					FakeScanImage: func(ctx context.Context, image string, cacheDir string) (*report.Report, error) {
						return nil, xerrors.New("failed to scan images")
					},
					FakeUpdateDatabase: func(ctx context.Context, cacheDir string) error {
						return nil
					},
				},
			},
			args{
				context.Background(),
				[]string{"nginx"},
				"cache-dir",
			},
			[]report.Report{},
			false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			i := image.NewImageScanner(tt.fields.kubernetesClient, tt.fields.trivyClient)
			got, err := i.ScanImages(tt.args.ctx, tt.args.images, tt.args.cacheDir)
			if (err != nil) != tt.wantErr {
				t.Errorf("ImageScanner.ScanImages() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("ImageScanner.ScanImages() = %v, want %v", got, tt.want)
			}
		})
	}
}
