package main

import (
	"context"
	"flag"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/hnts/vulnerability-exporter/pkg/exporter"
	k8s "github.com/hnts/vulnerability-exporter/pkg/kubernetes"
	"github.com/hnts/vulnerability-exporter/pkg/scanner"
	"github.com/hnts/vulnerability-exporter/pkg/trivy"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promhttp"
	"k8s.io/client-go/kubernetes"
	"k8s.io/client-go/rest"
	"k8s.io/klog/v2"
)

var (
	listenAddress = flag.String("web.listen-address", ":9191", "Address to listen on for web interface and telemetry.")
	metricsPath   = flag.String("web.metrics-path", "/metrics", "Path under which to expose metrics.")
	usedNamespace = flag.String("namespace", "default", "Namespace in which the Pod that scans nodes for vulnerabilities is created.")
)

func init() {
	flagset := flag.NewFlagSet("", flag.ContinueOnError)
	klog.InitFlags(flagset)
}

func main() {
	flag.Parse()
	defer klog.Flush()
	config, err := rest.InClusterConfig()
	if err != nil {
		klog.Fatalf("failed to initialize kube config: %s", err.Error())
	}

	clientset, err := kubernetes.NewForConfig(config)
	if err != nil {
		klog.Fatalf("failed to create kubernetes client: %s", err.Error())
	}

	kclient := k8s.NewClient(clientset)
	tclient := trivy.Client{}
	scanners := []scanner.Scanner{
		scanner.NewImageScanner(kclient, tclient),
		scanner.NewNodeScanner(kclient, *usedNamespace),
	}

	mux := http.NewServeMux()
	mux.HandleFunc("/healthz", func(w http.ResponseWriter, r *http.Request) { w.WriteHeader(http.StatusOK) })
	mux.Handle(*metricsPath, promhttp.Handler())

	server := http.Server{
		Addr:    *listenAddress,
		Handler: mux,
	}
	exporter := exporter.NewExporter(scanners, server)
	prometheus.MustRegister(exporter)

	ctx, stop := signal.NotifyContext(context.Background(), os.Interrupt, syscall.SIGTERM)
	defer stop()

	exporter.Listen(ctx, 6000*time.Second)
}
